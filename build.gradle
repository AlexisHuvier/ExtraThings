buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		classpath 'co.riiid:gradle-github-plugin:0.4.2'
    }
}

plugins {
    id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.32"
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'co.riiid.gradle'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = "1.0"
group = "com.yourname.modid" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "modid"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.5.2768"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20171003"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task signJar(type: SignJar) {
    onlyIf { // On exécute seulement s'il y a un keystore spécifié dans le gradle.properties
        project.hasProperty('keyStore')
    }

    keyStore = project.keyStore // on indique le keystore ainsi que toutes les autres variables
    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    inputFile = jar.archivePath // On indique le jar d'entrée et de sortie
    outputFile = jar.archivePath
}

assemble.dependsOn signJar // Lorsque l'on compile le jar on le signe

plugins.withType(se.bjurr.gitchangelog.plugin.gradle.GitChangelogGradlePlugin.class) {
	task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) { // "makeChangelog" sera le nom à appeler pour générer le changelog, vous pouvez mettre ce que vous voulez
        filePath = "CHANGELOG.html" // filePath correspond à la destination du changelog
        untaggedName = "Version actuelle ${project.version}" // untaggedName est la valeur qui sera générée en haut du changelog pour préciser la version courante du mod
        templateContent = file('changelog.mustache').getText('UTF-8') // ici on indique que le format sera à lire dans le fichier changelog.mustache
    }
}

if (file('private.properties').exists()) {
	ext.privateConfigFile = file 'private.properties' // On spécifie le fichier

    privateConfigFile.withReader { // Et on le charge sous le nom privateConfig
        def p = new Properties()
        p.load(it)
        project.ext.privateConfig = new ConfigSlurper().parse p
    }
	
	// Github release
    github {
        owner = 'LavaPower'
        repo = 'ExtraThings'
        token = privateConfig.github_token // votre token
        tagName = version // la version de la release, ici on garde celle spécifiée pour générer le mod
        assets = [ // On ajoute tous les fichiers que l'on veut publier
            "build/libs/${archivesBaseName}-${version}-sources.jar", // Le fichier source (facultatif)
            "build/libs/${archivesBaseName}-${version}-dev.jar", // Le fichier pour les développeurs (facultatif)
            "build/libs/${archivesBaseName}-${version}.jar" // Le fichier de base
        ]
    }
}
